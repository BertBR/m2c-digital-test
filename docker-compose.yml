version: '3.5'

services:
  api:
    container_name: api
    build:
      context: ./api
      target: development
    depends_on:
      - postgres
      - mongo
    env_file:
      - .env
    environment:
      - JWT_SECRET=topsecret
      - JWT_EXPIRES_TIME=604800
      - SWAGGER_PASSWORD=topsecret
      - PORT=8080
      - NODE_ENV=development
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=m2c_db
      - DB_HOST=pg_db
      - DB_PORT=5432
      - DB_SCHEMA=public
      - DATABASE_URL=postgres://postgres:postgres@pg_db:5432/m2c_db?schema=public?sslmode=prefer
    volumes:
      - ./api:/usr/app
      - ./api/node_modules:/usr/app/node_modules
      - ./wait-for-it.sh:/usr/app/wait-for-it.sh
    expose:
      - 8080
      - 9229
    ports:
      - 8080:8080
      - 9229:9229
    command: >
      sh -c "chmod +x /usr/app/wait-for-it.sh && 
      /usr/app/wait-for-it.sh pg_db:5432 --timeout=30 --strict -- 
      make start-dev"
    deploy:
      resources:
        limits:
          cpus: '0.5'  # Limit to 50% of a single CPU core
          memory: 512M  # Limit to 512MB of RAM
        reservations:
          cpus: '0.25'  # Reserve 25% of a single CPU core
          memory: 256M  # Reserve 256MB of RAM

  postgres:
    container_name: pg_db
    image: postgres
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=m2c_db
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d m2c_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'  # Limit to 50% of a single CPU core
          memory: 512M  # Limit to 512MB of RAM
        reservations:
          cpus: '0.25'  # Reserve 25% of a single CPU core
          memory: 256M  # Reserve 256MB of RAM

  mongo:
    container_name: mongo_db
    image: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongo
      - MONGO_INITDB_ROOT_PASSWORD=mongo
    ports:
      - 27017:27017
    deploy:
      resources:
        limits:
          cpus: '0.5'  # Limit to 50% of a single CPU core
          memory: 512M  # Limit to 512MB of RAM
        reservations:
          cpus: '0.25'  # Reserve 25% of a single CPU core
          memory: 256M  # Reserve 256MB of RAM

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - 5672:5672
      - 15672:15672
    deploy:
      resources:
        limits:
          cpus: '0.5'  # Limit to 50% of a single CPU core
          memory: 512M  # Limit to 512MB of RAM
        reservations:
          cpus: '0.25'  # Reserve 25% of a single CPU core
          memory: 256M  # Reserve 256MB of RAM

  nodejs-consumer:
    container_name: nodejs-consumer
    build:
      context: ./consumer-nodejs
      target: development
    depends_on:
      - rabbitmq
    env_file:
      - .env
    environment:
      - NODE_ENV=development
    volumes:
      - ./consumer-nodejs:/usr/app
      - ./consumer-nodejs/node_modules:/usr/app/node_modules
      - ./wait-for-it.sh:/usr/app/wait-for-it.sh
    command: >
      sh -c "chmod +x /usr/app/wait-for-it.sh && 
      /usr/app/wait-for-it.sh rabbitmq:5672 --timeout=30 --strict -- 
      yarn install && yarn build && yarn start"
    deploy:
      resources:
        limits:
          cpus: '0.5'  # Limit to 50% of a single CPU core
          memory: 512M  # Limit to 512MB of RAM
        reservations:
          cpus: '0.25'  # Reserve 25% of a single CPU core
          memory: 256M  # Reserve 256MB of RAM

  golang-consumer:
    container_name: golang-consumer
    build:
      context: ./consumer-golang
      target: development
    depends_on:
      - rabbitmq
    env_file:
      - .env
    volumes:
      - ./consumer-golang:/usr/app
      - ./wait-for-it.sh:/usr/app/wait-for-it.sh
    command: >
      sh -c "chmod +x /usr/app/wait-for-it.sh && 
      /usr/app/wait-for-it.sh rabbitmq:5672 --timeout=30 --strict -- 
      go run main.go"
    deploy:
      resources:
        limits:
          cpus: '0.5'  # Limit to 50% of a single CPU core
          memory: 512M  # Limit to 512MB of RAM
        reservations:
          cpus: '0.25'  # Reserve 25% of a single CPU core
          memory: 256M  # Reserve 256MB of RAM

networks:
  default:
    driver: bridge